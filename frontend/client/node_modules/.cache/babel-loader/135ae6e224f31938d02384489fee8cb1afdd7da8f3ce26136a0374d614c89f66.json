{"ast":null,"code":"var _jsxFileName = \"/Users/grzesiekpasich/My/Work/Programming/Projects/Fit-Service-Project/frontend/client/src/pages/RegisterPage/RegisterPage.tsx\";\nimport React from 'react';\nimport '../../styles/index.scss';\nimport RegisterForm from '../../components/organisms/RegisterForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RegisterPage = () => {\n  /*\n    const [name, setName] = useState('');\n    const [surname, setSurname] = useState('');\n    const [birthday, setBirthday] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const [message, setMessage] = useState('');\n    const navigate = useNavigate();\n  \n    const handleName = (name :string) => {\n      setName(name);\n    };\n  \n    const handleSurname = (surname :string) => {\n      setSurname(surname);\n    };\n  \n    const handleBirthday = (birthday :string) => {\n      setBirthday(birthday);\n    };\n  \n    const handleEmail = (email :string) => {\n      setEmail(email);\n    };\n    \n    const handlePassword = (password :string) => {\n      setPassword(password);\n    };\n  \n    const handleConfirmPassword = (password :string) => {\n      setConfirmPassword(password);\n    };\n  \n    const submit = async (e: SyntheticEvent) =>{\n      e.preventDefault();\n      if(password === confirmPassword) {\n        const response = await fetch('http://localhost:8000/api/register', {\n          method: 'POST',\n          headers: {'Content-Type': 'application/json'},\n          body: JSON.stringify({\n            email,\n            password,\n            name,\n            surname,\n            birthday\n          })\n        })\n        if(response.ok){\n          return navigate('/register_successful');\n        }\n        else{\n          console.error('Error', response.status, response.statusText);\n          return setMessage('Error');\n        }\n      }\n      else {\n        return setMessage('Passwords do not match');\n      }\n    }\n  */\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RegisterForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_c = RegisterPage;\nexport default RegisterPage;\nvar _c;\n$RefreshReg$(_c, \"RegisterPage\");","map":{"version":3,"names":["React","RegisterForm","jsxDEV","_jsxDEV","RegisterPage","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/grzesiekpasich/My/Work/Programming/Projects/Fit-Service-Project/frontend/client/src/pages/RegisterPage/RegisterPage.tsx"],"sourcesContent":["import React, {SyntheticEvent, useState } from 'react';\nimport '../../styles/index.scss';\nimport RegisterForm from '../../components/organisms/RegisterForm';\nimport { useNavigate } from 'react-router-dom';\nimport CreateAccountButton from '../../components/atoms/Buttons/CreateAccountButton';\nimport PasswordRegisterInput from '../../components/atoms/inputs/PasswordRegisterInput';\nimport EmailRegisterInput from '../../components/atoms/inputs/EmailRegisterInput';\nimport NameRegisterInput from '../../components/atoms/inputs/NameRegisterInput';\nimport SurnameRegisterInput from '../../components/atoms/inputs/SurnameRegisterInput';\nimport BirthdayRegisterInput from '../../components/atoms/inputs/BirthdayRegisterInput';\n\nconst RegisterPage = () => {\n/*\n  const [name, setName] = useState('');\n  const [surname, setSurname] = useState('');\n  const [birthday, setBirthday] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [message, setMessage] = useState('');\n  const navigate = useNavigate();\n\n  const handleName = (name :string) => {\n    setName(name);\n  };\n\n  const handleSurname = (surname :string) => {\n    setSurname(surname);\n  };\n\n  const handleBirthday = (birthday :string) => {\n    setBirthday(birthday);\n  };\n\n  const handleEmail = (email :string) => {\n    setEmail(email);\n  };\n  \n  const handlePassword = (password :string) => {\n    setPassword(password);\n  };\n\n  const handleConfirmPassword = (password :string) => {\n    setConfirmPassword(password);\n  };\n\n  const submit = async (e: SyntheticEvent) =>{\n    e.preventDefault();\n    if(password === confirmPassword) {\n      const response = await fetch('http://localhost:8000/api/register', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({\n          email,\n          password,\n          name,\n          surname,\n          birthday\n        })\n      })\n      if(response.ok){\n        return navigate('/register_successful');\n      }\n      else{\n        console.error('Error', response.status, response.statusText);\n        return setMessage('Error');\n      }\n    }\n    else {\n      return setMessage('Passwords do not match');\n    }\n  }\n*/\n  return (\n    <main>\n      <h1>Register</h1>\n      <RegisterForm />\n    </main>\n  );\n}\n\nexport default RegisterPage;"],"mappings":";AAAA,OAAOA,KAAK,MAAmC,OAAO;AACtD,OAAO,yBAAyB;AAChC,OAAOC,YAAY,MAAM,yCAAyC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AASnE,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,oBACED,OAAA;IAAAE,QAAA,gBACEF,OAAA;MAAAE,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjBN,OAAA,CAACF,YAAY;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACZ,CAAC;AAEX,CAAC;AAAAC,EAAA,GApEKN,YAAY;AAsElB,eAAeA,YAAY;AAAC,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}