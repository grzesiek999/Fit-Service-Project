{"ast":null,"code":"var _jsxFileName = \"/Users/grzesiekpasich/My/Work/Programming/Projects/Fit-Service-Project/frontend/client/src/pages/AccountConfirmPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AccountConfirmPage = () => {\n  _s();\n  const {\n    uid,\n    token\n  } = useParams();\n  const [active, setActive] = useState(false);\n  const [activeMessage, setActiveMessage] = useState('');\n  useEffect(() => {\n    const confirmEmail = async (uid, token) => {\n      if (uid && token) {\n        try {\n          const response = await fetch('http://localhost:8000/api/confirm_email', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              uid,\n              token\n            })\n          });\n          if (response.ok) {\n            const content = await response.json();\n            setActiveMessage(content.message);\n            if (activeMessage === \"activation successful\") {\n              setActive(true);\n            }\n          } else {\n            console.log('blad aktywacji konta');\n          }\n        } catch (error) {\n          console.log('request error');\n        }\n      }\n    };\n    confirmEmail(uid, token);\n  }, [uid, token]);\n  if (active === true) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Twoje konto zosta\\u0142o zaaktywowane!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Niewa\\u017Cny link aktywacyjny!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this);\n  }\n};\n_s(AccountConfirmPage, \"CwJnI1vFOLFCyIW3hmJhCHsnyV0=\", false, function () {\n  return [useParams];\n});\n_c = AccountConfirmPage;\nexport default AccountConfirmPage;\nvar _c;\n$RefreshReg$(_c, \"AccountConfirmPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","jsxDEV","_jsxDEV","AccountConfirmPage","_s","uid","token","active","setActive","activeMessage","setActiveMessage","confirmEmail","response","fetch","method","headers","body","JSON","stringify","ok","content","json","message","console","log","error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/grzesiekpasich/My/Work/Programming/Projects/Fit-Service-Project/frontend/client/src/pages/AccountConfirmPage.tsx"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport { useParams } from \"react-router-dom\";\n\n\nconst AccountConfirmPage = () =>{\n\n    const {uid, token} = useParams();\n    const [active, setActive] = useState<boolean>(false);\n    const [activeMessage, setActiveMessage] = useState('');\n\n    useEffect(()=> {\n        const confirmEmail = async (uid:string | undefined, token:string | undefined) => {\n            if(uid && token){\n                try{\n                    const response = await fetch('http://localhost:8000/api/confirm_email', {\n                        method: 'POST',\n                        headers: {'Content-Type': 'application/json'},\n                        body: JSON.stringify({\n                            uid,\n                            token\n                        })\n                    });\n                    if(response.ok){\n                        const content = await response.json();\n                        setActiveMessage(content.message);\n                        if(activeMessage === \"activation successful\"){\n                            setActive(true);\n                        }\n                    }\n                    else{\n                        console.log('blad aktywacji konta');\n                    }\n                } catch (error){\n                    console.log('request error');\n                }\n            }\n        }\n        confirmEmail(uid, token);\n    }, [uid, token]);\n\n    if(active === true){\n        return(\n            <div>\n                Twoje konto zostało zaaktywowane!\n            </div>\n        );\n    }\n    else{\n        return(\n            <div>\n                Nieważny link aktywacyjny!\n            </div>\n        );\n    }\n}\n\nexport default AccountConfirmPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAChD,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG7C,MAAMC,kBAAkB,GAAGA,CAAA,KAAK;EAAAC,EAAA;EAE5B,MAAM;IAACC,GAAG;IAAEC;EAAK,CAAC,GAAGN,SAAS,CAAC,CAAC;EAChC,MAAM,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAU,KAAK,CAAC;EACpD,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEtDD,SAAS,CAAC,MAAK;IACX,MAAMa,YAAY,GAAG,MAAAA,CAAON,GAAsB,EAAEC,KAAwB,KAAK;MAC7E,IAAGD,GAAG,IAAIC,KAAK,EAAC;QACZ,IAAG;UACC,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyC,EAAE;YACpEC,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cAAC,cAAc,EAAE;YAAkB,CAAC;YAC7CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;cACjBb,GAAG;cACHC;YACJ,CAAC;UACL,CAAC,CAAC;UACF,IAAGM,QAAQ,CAACO,EAAE,EAAC;YACX,MAAMC,OAAO,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;YACrCX,gBAAgB,CAACU,OAAO,CAACE,OAAO,CAAC;YACjC,IAAGb,aAAa,KAAK,uBAAuB,EAAC;cACzCD,SAAS,CAAC,IAAI,CAAC;YACnB;UACJ,CAAC,MACG;YACAe,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;UACvC;QACJ,CAAC,CAAC,OAAOC,KAAK,EAAC;UACXF,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;QAChC;MACJ;IACJ,CAAC;IACDb,YAAY,CAACN,GAAG,EAAEC,KAAK,CAAC;EAC5B,CAAC,EAAE,CAACD,GAAG,EAAEC,KAAK,CAAC,CAAC;EAEhB,IAAGC,MAAM,KAAK,IAAI,EAAC;IACf,oBACIL,OAAA;MAAAwB,QAAA,EAAK;IAEL;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAEd,CAAC,MACG;IACA,oBACI5B,OAAA;MAAAwB,QAAA,EAAK;IAEL;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAEd;AACJ,CAAC;AAAA1B,EAAA,CAlDKD,kBAAkB;EAAA,QAECH,SAAS;AAAA;AAAA+B,EAAA,GAF5B5B,kBAAkB;AAoDxB,eAAeA,kBAAkB;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}